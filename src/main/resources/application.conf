akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  logger-startup-timeout = 30s
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = 0
  log-dead-letters-during-shutdown = false

  default-dispatcher {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 2

      # The parallelism factor is used to determine thread pool size using the
      # following formula: ceil(available processors * factor). Resulting size
      # is then bounded by the parallelism-min and parallelism-max values.
      parallelism-factor = 1.0

      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 4
    }
  }

  actor {
    allow-java-serialization = on
    actor.warn-about-java-serializer-usage = on

    #serializers.name = "serializer.ReplicatedChainSerializer"

    serialization-bindings {
      #"" = name
    }
  }

  remote {
    artery {
      advanced {
        maximum-frame-size = 5MiB #increase if necessary

        #The default size of the system messages buffer is 20000
        #system-message-buffer-size = 20000

        # queue for outgoing control (system) messages 
        #outbound-control-queue-size = 3072
      }
    }
  }

  cluster {
    # How many members are needed to start a cluster.
    #min-nr-of-members = 2

    #log-info = off
    failure-detector {
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
      threshold = 10 # 8
      heartbeat-interval = 1 s
      acceptable-heartbeat-pause = 4 s #3
    }

    # use-dispatcher = cluster-dispatcher
    metrics.enabled = off

    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"


    # Although, downining not strictly necessary for ddata, auto downing ensures that unreachable nodes do eventually get cleaned up.
    split-brain-resolver {
      # Select one of the available strategies (see descriptions below):
      # static-quorum, keep-majority, keep-oldest, down-all, lease-majority
      active-strategy = keep-majority

      stable-after = 2s

      down-all-when-unstable = on
    }


    shutdown-after-unsuccessful-join-seed-nodes = 60s
  }

  # CoordinatedShutdown will run the tasks that are added to these
  # phases. The phases can be ordered as a DAG by defining the
  # dependencies between the phases.
  # Each phase is defined as a named config section with the
  # following optional properties:
  # - timeout=15s: Override the default-phase-timeout for this phase.
  # - recover=off: If the phase fails the shutdown is aborted
  #                and depending phases will not be executed.
  # depends-on=[]: Run the phase after the given phases
  coordinated-shutdown {
    # Exit the JVM (System.exit(0)) in the last phase actor-system-terminate
    # if this is set to 'on'. It is done after termination of the
    # ActorSystem if terminate-actor-system=on, otherwise it is done
    # immediately when the last phase is reached.

    exit-jvm = on #for k8s only

    default-phase-timeout = 10 seconds
  }
}